diff --git a/utils.js b/utils.js
index 0000000..1111111 100644
--- a/utils.js
+++ b/utils.js
@@
+import { execFile } from 'node:child_process';
+import { promisify } from 'node:util';
+const pexec = promisify(execFile);
+
+export async function runCmd(cmd, args = [], opts = {}) {
+  const options = { timeout: 7000, maxBuffer: 1024 * 1024, ...opts };
+  try {
+    const { stdout, stderr } = await pexec(cmd, args, options);
+    return { ok: true, code: 0, stdout, stderr };
+  } catch (e) {
+    // Normalize error shape
+    return {
+      ok: false,
+      code: typeof e.code === 'number' ? e.code : -1,
+      stdout: e.stdout || '',
+      stderr: e.stderr || (e.message ?? String(e)),
+      error: e,
+    };
+  }
+}
+
+export function redactString(s, { noRedact, verbose } = {}) {
+  if (noRedact) return s;
+  // Sederhana: redact IP v4 dan argumen panjang
+  return s
+    .replace(/\b\d{1,3}(\.\d{1,3}){3}\b/g, '[REDACTED_IP]')
+    .replace(/--(?:secret|token|key)[=\s][^\s]+/gi, '--$1=[REDACTED]');
+}
+
+export function fmtBytes(n) {
+  const units = ['B','KB','MB','GB','TB'];
+  let i = 0; let x = Number(n) || 0;
+  while (x >= 1024 && i < units.length - 1) { x /= 1024; i++; }
+  return `${x.toFixed(1)} ${units[i]}`;
+}
diff --git a/cli.js b/cli.js
index 0000000..2222222 100644
--- a/cli.js
+++ b/cli.js
@@
+export function parseArgs(argv) {
+  const out = {
+    json: false, verbose: false, noRedact: false,
+    host: 'orchestrator.nexus.xyz', ports: [443, 8443], timeout: 7000, help: false,
+  };
+  for (const a of argv) {
+    if (a === '--json') out.json = true;
+    else if (a === '--verbose') out.verbose = true;
+    else if (a === '--no-redact') out.noRedact = true;
+    else if (a === '--help' || a === '-h') out.help = true;
+    else if (a.startsWith('--host=')) out.host = a.slice(7).trim();
+    else if (a.startsWith('--timeout=')) out.timeout = Math.max(1000, Number(a.slice(10))||7000);
+    else if (a.startsWith('--ports=')) {
+      const parts = a.slice(8).split(',').map(s => Number(s.trim())).filter(Boolean);
+      if (parts.length) out.ports = parts;
+    }
+  }
+  return out;
+}
+
+export function printHelp() {
+  console.log(
+`Nexus Doctor v0 (read-only)
+
+Usage: node ./nexus-doctor.mjs [--json] [--verbose] [--no-redact] [--timeout=ms] [--host=H] [--ports=443,8443]
+
+Checks:
+  • nexus-network CLI version
+  • TLS/TCP connectivity to orchestrator (ports 443,8443)
+  • NTP offset via ntpdate -q pool.ntp.org
+  • CPU/memory and nexus-network threads (if running)
+
+Privacy:
+  • Default redacts sensitive details (IPs/cmdline). Use --verbose to show details.
+`);}
diff --git a/nexus-doctor.mjs b/nexus-doctor.mjs
index 0000000..3333333 100644
--- a/nexus-doctor.mjs
+++ b/nexus-doctor.mjs
@@
-import { parseArgs, printHelp } from './cli.js';
-import { checkCliVersion, checkConnectivity, checkNtp, checkProcessThreads } from './checks.js';
+import { parseArgs, printHelp } from './cli.js';
+import { checkCliVersion, checkConnectivity, checkNtp, checkProcessThreads } from './checks.js';
+
 const args = parseArgs(process.argv.slice(2));
 if (args.help) { printHelp(); process.exit(0); }
 
-// Jalankan checks (boleh paralel)
-const [cli, connectivity, ntp, proc] = await Promise.all([
+// Jalankan checks (paralel)
+const [cli, connectivity, ntp, proc] = await Promise.allSettled([
   checkCliVersion(args),
   checkConnectivity(args),
   checkNtp(args),
   checkProcessThreads(args),
 ]);
 
-const result = { cli, connectivity, ntp, process: proc };
+const unwrap = (p) => p.status === 'fulfilled' ? p.value : ({ ok:false, error: p.reason?.message || String(p.reason) });
+const result = {
+  cli: unwrap(cli), connectivity: unwrap(connectivity), ntp: unwrap(ntp), process: unwrap(proc)
+};
 
 if (args.json) {
   console.log(JSON.stringify(result, null, 2));
   process.exit(0);
 }
 
 // Ringkas (human)
-const redact = (s) => args.noRedact ? s : s.replace(/\b\d{1,3}(\.\d{1,3}){3}\b/g, '[REDACTED_IP]');
+import { redactString as redact } from './utils.js';
 console.log([
   `CLI     : ${result.cli.ok ? result.cli.version : 'N/A'}`,
   `Connect : ${result.connectivity.ok ? result.connectivity.summary : 'ERROR'}`,
   `NTP     : ${result.ntp.ok ? result.ntp.summary : 'N/A'}`,
   `Process : ${result.process.ok ? result.process.summary : 'N/A'}`,
 ].join('\n'));
